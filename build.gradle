plugins {
    id 'com.github.node-gradle.node' version '7.0.2'
    id 'io.gatling.gradle' version '3.9.5' // âœ… Use a known available version
}

group = 'com.example'
version = '1.0.0'

repositories {
    mavenCentral() // âœ… Crucial for Gatling and Scala
}

node {
    version = '20.11.1'
    npmVersion = '10.2.3'
    download = true
    workDir = file("${project.buildDir}/nodejs")
    nodeProjectDir = file("${project.projectDir}")
}

// âœ… Avoid conflict with built-in Gradle test task
def npmScript(taskName, npmScriptName = taskName) {
    tasks.register(taskName, com.github.gradle.node.npm.task.NpmTask) {
        group = 'Playwright'
        args = ['run', npmScriptName]
    }
}

npmScript('playwrightTest', 'test')
npmScript('testUi', 'test:ui')
npmScript('testApi', 'test:api')
npmScript('testHeaded', 'test:headed')
npmScript('report', 'report')
npmScript('cleanPlaywright', 'clean') // renamed to avoid conflict
npmScript('reportGenerate', 'report:generate')
npmScript('reportOpen', 'report:open')
npmScript('jsonServe', 'json:serve')
npmScript('server', 'server')
npmScript('jsonServeGatling', 'json:serve:gatling')

tasks.register('fullTestReport') {
    group = 'Playwright'
    description = 'Run Playwright tests and generate Allure report'
    dependsOn 'playwrightTest', 'reportGenerate', 'reportOpen'
}

tasks.register('fullDashboardReport') {
    group = 'Playwright'
    description = 'Run Playwright tests and serve data for Grafana'
    dependsOn 'playwrightTest', 'reportGenerate', 'jsonServe'
}

tasks.register('fullTestPipeline') {
    group = 'Verification'
    description = 'Run Playwright, Gatling, and open Allure report'
    dependsOn 'playwrightTest', 'gatlingRun', 'reportGenerate'
    finalizedBy 'reportOpen'
}
tasks.named('gatlingRun') {
    finalizedBy 'openGatlingReport'
}
import org.gradle.internal.os.OperatingSystem

// Task to open the latest Gatling report
tasks.register('openGatlingReport') {
    group = "Gatling"
    description = "Opens the latest Gatling HTML report"

    doLast {
        def reportsDir = file("$buildDir/reports/gatling")
        if (!reportsDir.exists()) {
            throw new GradleException("No Gatling reports found.")
        }

        def latestReport = reportsDir.listFiles()
            .findAll { it.isDirectory() }
            .sort { -it.lastModified() }
            .first()

        if (latestReport) {
            def indexFile = new File(latestReport, "index.html")
            if (!indexFile.exists()) {
                throw new GradleException("index.html not found in ${latestReport}")
            }

            if (OperatingSystem.current().isWindows()) {
                exec { commandLine 'cmd', '/c', 'start', '', indexFile.absolutePath }
            } else if (OperatingSystem.current().isMacOsX()) {
                exec { commandLine 'open', indexFile.absolutePath }
            } else {
                exec { commandLine 'xdg-open', indexFile.absolutePath }
            }
        } else {
            throw new GradleException("No Gatling report directories found.")
        }
    }
}
// ðŸ†• Task: Copy stats.json as gatling-report.json
tasks.register('copyGatlingJson') {
    group = "Gatling"
    description = "Copies stats.json from Gatling report to gatling-report.json for Grafana JSON server"

    dependsOn 'gatlingRun' // Ensure Gatling runs first

    doLast {
        def reportsDir = file("$buildDir/reports/gatling")
        if (!reportsDir.exists()) throw new GradleException("No Gatling reports found.")

        def latestReport = reportsDir.listFiles()
            .findAll { it.isDirectory() }
            .sort { -it.lastModified() }
            .first()

        def sourceFile = new File(latestReport, "js/stats.json")
        def targetFile = new File(projectDir, "gatling-report.json")

        if (!sourceFile.exists()) {
            throw new GradleException("stats.json not found in latest Gatling report.")
        }

        targetFile.text = sourceFile.text
        println "Copied stats.json to gatling-report.json"
    }
}